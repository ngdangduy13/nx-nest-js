//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


enum CREDIT_STATUS {
    NOT_VERIFY
    SUBMITTED
    VERIFYING
    VERIFIED
    REJECTED
}

enum SELLER_STATUS {
    NOT_VERIFY
    SUBMITTED
    VERIFYING
    VERIFIED
    REJECTED
}

model Account {
  id              String
  displayName     String?
  image           String?
  cover           String?
  video           String?
  bio             String?
  links           Json?
  creditStatus    CREDIT_STATUS   @default(NOT_VERIFY)
  creditLimit     Decimal         @default(0)
  sellerStatus    SELLER_STATUS   @default(NOT_VERIFY)
  commissionFee   Decimal         @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  @@unique([id])
}


model Currency {
  chain       String
  contract    String
  value       Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  makAssets   Quote[] @relation("makeCurrency")
  takeAssets  Quote[] @relation("takeCurrency")
  @@unique([chain, contract])
}


model Nft {
  chain               String
  contract            String
  tokenId             String
  hashKey             String
  uri                 String?
  name                String?
  symbol              String?
  image               String?
  description         String?
  supply              Decimal
  attributes          Json?
  creators            Json?
  royalties           Json?
  signatures          Json?
  owner               String?
  isLazy              Boolean? @default(false)
  minted              Boolean? @default(true)
  numberOfViews       Int @default(0)
  numberOfFavorites   Int @default(0)
  collection          NftCollection? @relation(fields: [chain, contract], references: [chain, contract], onUpdate: NoAction)
  makeQuotes          Quote[] @relation("makeNft")
  takeQuotes          Quote[] @relation("takeNft")
  views               NftView[]
  favorites           NftFavorite[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  @@unique([chain, contract, tokenId])
  @@index([chain, contract, tokenId, name])
}


model NftCollection {
  chain       String
  contract    String
  name        String?
  symbol      String?
  type        String?
  description String?
  owner       String?
  image       String?
  banner      String?
  nfts        Nft[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([chain, contract])
}


model NftFavorite {
  chain           String
  contract        String
  tokenId         String
  account         String
  nft             Nft @relation(fields: [chain, contract, tokenId], references: [chain, contract, tokenId], onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@unique([chain, contract, tokenId, account])
}


model NftView {
  chain           String
  contract        String
  tokenId         String
  account         String
  ipAddress       String
  nft             Nft @relation(fields: [chain, contract, tokenId], references: [chain, contract, tokenId], onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@unique([chain, contract, tokenId, account])
}


model Order {
  chain           String
  id              String
  sellingKey      String
  buyingKey       String
  seller          String
  buyer           String
  contract        String
  tokenId         String
  fill            Decimal
  currency        String
  total           Decimal
  nextPaymentDate DateTime?
  dueDate         DateTime?
  completed       Boolean
  payments        Payment[]
  createdAt       DateTime
  updatedAt       DateTime @updatedAt
  @@unique([chain, id])
}


model Payment {
  chain         String
  id            String
  orderId       String
  amount        Decimal
  createdAt     DateTime
  updatedAt     DateTime @updatedAt
  order         Order? @relation(fields: [chain, orderId], references: [chain, id], onUpdate: NoAction)
  @@unique([chain, id])
}


model Quote {
  chain                   String
  hashKey                 String
  maker                   String
  makeAssetClass          String?
  makeAssetContract       String?
  makeAssetTokenId        String?
  makeAssetValue          Decimal? @db.Decimal(65,0)
  taker                   String?
  takeAssetClass          String?
  takeAssetContract       String?
  takeAssetTokenId        String?
  takeAssetValue          Decimal? @db.Decimal(65,0)
  isMakeFill              Boolean
  originFees              Int?
  payouts                 Json?
  signature               String?
  fill                    Int @default(0)
  status                  Int @default(0)
  makeNft                 Nft? @relation(name: "makeNft", fields: [chain, makeAssetContract, makeAssetTokenId], references: [chain, contract, tokenId], onUpdate: NoAction)
  takeNft                 Nft? @relation(name: "takeNft", fields: [chain, takeAssetContract, takeAssetTokenId], references: [chain, contract, tokenId], onUpdate: NoAction)
  makeCurrency            Currency? @relation(name: "makeCurrency", fields: [chain, makeAssetContract], references: [chain, contract], onUpdate: NoAction)
  takeCurrency            Currency? @relation(name: "takeCurrency", fields: [chain, takeAssetContract], references: [chain, contract], onUpdate: NoAction)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  @@unique([chain, hashKey])
}
